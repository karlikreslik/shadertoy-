const vec3 E = vec3(0., .01, 1.);

float t;

vec4 nz2un(vec2 p) { return texture(iChannel0, p); }
vec4 nz2(vec2 p) { 
    vec2 texSize = vec2(textureSize(iChannel0, 0));
    return texture(iChannel0, (p - 0.5) / texSize); 
}
vec4 nz3un(vec3 p) { return texture(iChannel0, p.xy); } // Pouze 2D projekce
vec4 nz3(vec3 p) { 
    vec2 texSize = vec2(textureSize(iChannel0, 0));
    return texture(iChannel0, (p.xy - 0.5) / texSize); 
}

mat2 Rm(float a) { 
    float c = cos(a);
    float s = sin(a); 
    return mat2(c, s, -s, c); 
}

float rep1(float p, float s) { return mod(p, s) - s * 0.5; }
vec2 rep2(vec2 p, vec2 s) { return mod(p, s) - s * 0.5; }
vec3 rep3(vec3 p, vec3 s) { return mod(p, s) - s * 0.5; }

float vmax(vec3 v) { return max(max(v.x, v.y), v.z); }
float vmax(vec2 v) { return max(v.x, v.y); }
float box3(vec3 p, vec3 s) { return vmax(abs(p) - s); }
float box2(vec2 p, vec2 s) { return vmax(abs(p) - s); }
float box1(float p, float s) { return abs(p) - s; }

float smin(float a, float b, float k) {
    float h = max(k - abs(a - b), 0.0) / k;
    return min(a, b) - h * h * k * (1.0 / 4.0);
}

float wgnd = 1e6;
float wbld = 1e6;
float wmetal = 1e6;
float wroad = 1e6;
float wglass = 1e6;
float wisl = 1e6;

// Cyberpunk lighting
vec3 lc = 4.0 * vec3(0.1, 0.8, 0.9);
vec3 ld = normalize(vec3(-1.0, 0.4, 1.9));

vec3 sky(vec3 d) {
    vec3 skyc = mix(vec3(0.1, 0.05, 0.3), vec3(0.3, 0.1, 0.8), smoothstep(-0.2, 0.5, d.y));
    skyc += lc * pow(max(0.0, dot(d, ld)), 10.0) * 2.0;
    return skyc;
}

// Floating islands
float floatingIslands(vec3 p) {
    p.y -= 15.0;
    vec2 id = floor(p.xz / 30.0);
    vec4 h = nz2(id);
    p.xz = rep2(p.xz, vec2(30.0));
    
    float island = length(p.xz) - (10.0 + 5.0 * h.x);
    island = max(island, p.y - (2.0 * h.y));
    island = max(island, -(p.y + 3.0 + 2.0 * h.z));
    
    float edge = abs(length(p.xz) - (9.0 + 5.0 * h.x)) - 0.1;
    if(edge < 0.5) {
        wmetal = min(wmetal, edge);
    }
    
    return island;
}

// Futuristic buildings
float bld(vec3 p, float flr) {
    float h = flr * 4.0 + 5.0;
    float twist = sin(p.z * 0.2 + t) * 2.0;
    p.x += twist;
    
    float d = max(box3(p, vec3(4.0, h, 4.0)), 
                 -box3(p - vec3(0.0, 3.0, 0.0), vec3(3.5, h - 2.0, 3.5)));
    
    float stripe = rep1(p.y, 1.5);
    if(abs(stripe) < 0.1 && d < 1.0) {
        wmetal = min(wmetal, abs(stripe) - 0.05);
    }
    
    return d;
}

// Distance function
float map(vec3 p) {
    wgnd = wbld = wmetal = wroad = wglass = wisl = 1e6;
    
    // Ground
    wgnd = p.y - 0.4;
    
    // Floating islands
    wisl = floatingIslands(p);
    
    // Buildings
    vec3 pb = p;
    pb.z = abs(pb.z);
    pb -= vec3(25.0, 0.0, 44.0);
    wbld = bld(pb, 4.0);
    
    return min(wgnd, min(wbld, wisl));
}

// Ray tracing function
float trace(vec3 o, vec3 d, float maxDist) {
    float t = 0.0;
    for(int i = 0; i < 100; i++) {
        vec3 p = o + d * t;
        float dist = map(p);
        if(dist < 0.001 || t > maxDist) break;
        t += dist;
    }
    return t;
}

// Normal calculation
vec3 calcNormal(vec3 p) {
    vec2 e = vec2(0.01, 0.0);
    return normalize(vec3(
        map(p + e.xyy) - map(p - e.xyy),
        map(p + e.yxy) - map(p - e.yxy),
        map(p + e.yyx) - map(p - e.yyx)
    ));
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
    
    t = iTime;
    vec3 O = vec3(40.0, 30.0, 40.0);
    vec3 D = normalize(vec3(uv, -2.0));
    
    // Camera movement
    D.yz *= Rm(0.2 - 0.13 * sin(t * 0.4));
    D.xz *= Rm(0.8 + 0.01 * sin(t * 0.5));
    
    // Raymarching
    float L = 200.0;
    float l = trace(O, D, L);
    
    // Coloring
    vec3 p = O + D * l;
    vec3 n = calcNormal(p);
    
    vec3 col = vec3(0.0);
    if(l >= L) {
        col = sky(D);
    } else {
        // Cyberpunk materials
        if(wgnd < 0.001) {
            col = vec3(0.1);
        } else if(wbld < 0.001) {
            col = vec3(0.05, 0.1, 0.2);
            float glow = sin(t * 2.0 + p.x * 5.0) * 0.5 + 0.5;
            glow *= sin(t * 1.7 + p.z * 3.0) * 0.5 + 0.5;
            col += vec3(0.1, 0.8, 0.9) * glow * 2.0;
        } else if(wmetal < 0.001) {
            col = vec3(0.1, 0.8, 0.9) * 2.0;
        } else if(wisl < 0.001) {
            col = vec3(0.3, 0.1, 0.8);
        }
        
        // Lighting
        float shadow = step(50.0, trace(p + ld * 0.1, ld, 50.0));
        col += lc * max(0.0, dot(ld, n)) * shadow;
    }
    
    // Fog and bloom
    vec3 fog = vec3(0.3, 0.1, 0.4) * 0.5;
    fog *= 0.5 + 0.5 * sin(t * 0.5 + p.x * 0.1) * sin(t * 0.3 + p.z * 0.2);
    col = mix(col, fog, smoothstep(0.0, L, l));
    
    fragColor = vec4(sqrt(col), 1.0);
}
